{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-socialsharing/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_x_socialsharing */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-socialsharing/lib.npmtest_cordova_plugin_x_socialsharing.js":"/* istanbul instrument in package npmtest_cordova_plugin_x_socialsharing */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_x_socialsharing = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_x_socialsharing = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-socialsharing/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-x-socialsharing && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_x_socialsharing */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_x_socialsharing\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_x_socialsharing.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_x_socialsharing.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_x_socialsharing.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_x_socialsharing.__dirname + '/lib.npmtest_cordova_plugin_x_socialsharing.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-socialsharing/node_modules/cordova-plugin-x-socialsharing/www/SocialSharing.js":"﻿function SocialSharing() {\n}\n\n// Override this method (after deviceready) to set the location where you want the iPad popup arrow to appear.\n// If not overridden with different values, the popup is not used. Example:\n//\n//   window.plugins.socialsharing.iPadPopupCoordinates = function() {\n//     return \"100,100,200,300\";\n//   };\nSocialSharing.prototype.iPadPopupCoordinates = function () {\n  // left,top,width,height\n  return \"-1,-1,-1,-1\";\n};\n\nSocialSharing.prototype.setIPadPopupCoordinates = function (coords) {\n  // left,top,width,height\n  cordova.exec(function() {}, this._getErrorCallback(function() {}, \"setIPadPopupCoordinates\"), \"SocialSharing\", \"setIPadPopupCoordinates\", [coords]);\n};\n\nSocialSharing.prototype.available = function (callback) {\n  cordova.exec(function (avail) {\n    callback(avail ? true : false);\n  }, null, \"SocialSharing\", \"available\", []);\n};\n\n// this is the recommended way to share as it is the most feature-rich with respect to what you pass in and get back\nSocialSharing.prototype.shareWithOptions = function (options, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareWithOptions\"), \"SocialSharing\", \"shareWithOptions\", [options]);\n};\n\nSocialSharing.prototype.share = function (message, subject, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"share\"), \"SocialSharing\", \"share\", [message, subject, this._asArray(fileOrFileArray), url]);\n};\n\nSocialSharing.prototype.shareViaTwitter = function (message, file /* multiple not allowed by twitter */, url, successCallback, errorCallback) {\n  var fileArray = this._asArray(file);\n  var ecb = this._getErrorCallback(errorCallback, \"shareViaTwitter\");\n  if (fileArray.length > 1) {\n    ecb(\"shareViaTwitter supports max one file\");\n  } else {\n    cordova.exec(successCallback, ecb, \"SocialSharing\", \"shareViaTwitter\", [message, null, fileArray, url]);\n  }\n};\n\nSocialSharing.prototype.shareViaFacebook = function (message, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaFacebook\"), \"SocialSharing\", \"shareViaFacebook\", [message, null, this._asArray(fileOrFileArray), url]);\n};\n\nSocialSharing.prototype.shareViaFacebookWithPasteMessageHint = function (message, fileOrFileArray, url, pasteMessageHint, successCallback, errorCallback) {\n  pasteMessageHint = pasteMessageHint || \"If you like you can paste a message from your clipboard\";\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaFacebookWithPasteMessageHint\"), \"SocialSharing\", \"shareViaFacebookWithPasteMessageHint\", [message, null, this._asArray(fileOrFileArray), url, pasteMessageHint]);\n};\n\nSocialSharing.prototype.shareViaWhatsApp = function (message, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaWhatsApp\"), \"SocialSharing\", \"shareViaWhatsApp\", [message, null, this._asArray(fileOrFileArray), url, null]);\n};\n\nSocialSharing.prototype.shareViaWhatsAppToReceiver = function (receiver, message, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaWhatsAppToReceiver\"), \"SocialSharing\", \"shareViaWhatsApp\", [message, null, this._asArray(fileOrFileArray), url, receiver]);\n};\n\nSocialSharing.prototype.shareViaSMS = function (options, phonenumbers, successCallback, errorCallback) {\n  var opts = options;\n  if (typeof options == \"string\") {\n    opts = {\"message\":options}; // for backward compatibility as the options param used to be the message\n  }\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaSMS\"), \"SocialSharing\", \"shareViaSMS\", [opts, phonenumbers]);\n};\n\nSocialSharing.prototype.shareViaEmail = function (message, subject, toArray, ccArray, bccArray, fileOrFileArray, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaEmail\"), \"SocialSharing\", \"shareViaEmail\", [message, subject, this._asArray(toArray), this._asArray(ccArray), this._asArray(bccArray), this._asArray(fileOrFileArray)]);\n};\n\nSocialSharing.prototype.canShareVia = function (via, message, subject, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"canShareVia\"), \"SocialSharing\", \"canShareVia\", [message, subject, this._asArray(fileOrFileArray), url, via]);\n};\n\nSocialSharing.prototype.canShareViaEmail = function (successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"canShareViaEmail\"), \"SocialSharing\", \"canShareViaEmail\", []);\n};\n\nSocialSharing.prototype.shareViaInstagram = function (message, fileOrFileArray, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareViaInstagram\"), \"SocialSharing\", \"shareViaInstagram\", [message, null, this._asArray(fileOrFileArray), null]);\n};\n\nSocialSharing.prototype.shareVia = function (via, message, subject, fileOrFileArray, url, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"shareVia\"), \"SocialSharing\", \"shareVia\", [message, subject, this._asArray(fileOrFileArray), url, via]);\n};\n\nSocialSharing.prototype.saveToPhotoAlbum = function (fileOrFileArray, successCallback, errorCallback) {\n  cordova.exec(successCallback, this._getErrorCallback(errorCallback, \"saveToPhotoAlbum\"), \"SocialSharing\", \"saveToPhotoAlbum\", [this._asArray(fileOrFileArray)]);\n};\n\nSocialSharing.prototype._asArray = function (param) {\n  if (param == null) {\n    param = [];\n  } else if (typeof param === 'string') {\n    param = new Array(param);\n  }\n  return param;\n};\n\nSocialSharing.prototype._getErrorCallback = function (ecb, functionName) {\n  if (typeof ecb === 'function') {\n    return ecb;\n  } else {\n    return function (result) {\n      console.log(\"The injected error callback of '\" + functionName + \"' received: \" + JSON.stringify(result));\n    }\n  }\n};\n\nSocialSharing.install = function () {\n  if (!window.plugins) {\n    window.plugins = {};\n  }\n\n  window.plugins.socialsharing = new SocialSharing();\n  return window.plugins.socialsharing;\n};\n\ncordova.addConstructor(SocialSharing.install);","/home/travis/build/npmtest/node-npmtest-cordova-plugin-x-socialsharing/node_modules/cordova-plugin-x-socialsharing/src/windows/SocialSharingProxy.js":"﻿﻿var cordova = require('cordova');\n\nmodule.exports = {\n    share: function (win, fail, args) {\n        //Text Message\n        var message = args[0];\n        //Title \n        var subject = args[1];\n        //File(s) Path\n        var fileOrFileArray = args[2];\n        //Web link\n        var url = args[3];\n\n\t\tvar folder = Windows.Storage.ApplicationData.current.temporaryFolder;\n\n        var getExtension = function (strBase64) {\n            return strBase64.substring(strBase64.indexOf(\"/\") + 1, strBase64.indexOf(\";base64\"));\n        };\n\n        var replaceAll = function (str, find, replace) {\n            return str.replace(new RegExp(find, 'g'), replace);\n        };\n\n        var sanitizeFilename = function (name) {\n            return replaceAll(name, \"[:\\\\\\\\/*?|<> ]\", \"_\");\n        };\n\n        var getFileName = function (position, fileExtension) {\n            var fileName = (subject ? sanitizeFilename(subject) : \"file\") + (position == 0 ? \"\" : \"_\" + position) + \".\" + fileExtension;\n            return fileName;\n        };\n\n        var createTemporalFile = function (fileName, buffer) {\n\n            var filePath = \"\";\n            return folder.createFileAsync(fileName, Windows.Storage.CreationCollisionOption.replaceExisting).then(function (file) {\n                filePath = file.path;\n                return Windows.Storage.FileIO.writeBufferAsync(file, buffer);\n            }).then(function(){\n                return Windows.Storage.StorageFile.getFileFromPathAsync(filePath);\n            });\n        };\n\n        var doShare = function (e) {\n            e.request.data.properties.title = subject?subject: \"Sharing\";\n            if (message) e.request.data.setText(message);\n            if (url) e.request.data.setWebLink(new Windows.Foundation.Uri(url));\n            if (fileOrFileArray.length > 0) {\n                var deferral = e.request.getDeferral();\n                var storageItems = [];\n                var filesCount = fileOrFileArray.length;\n\n                var completeFile = function () {\n                    if (!--filesCount) {\n                        storageItems.length && e.request.data.setStorageItems(storageItems);\n                        deferral.complete();\n                    }\n                };\n\n                for (var i = 0; i < fileOrFileArray.length; i++) {\n\n                    var file = fileOrFileArray[i];\n                    if (file.indexOf(\"data:\") >= 0) {\n                        var fileName = getFileName(i, getExtension(file));\n                        var buffer = Windows.Security.Cryptography.CryptographicBuffer.decodeFromBase64String(file.split(',')[1]);\n                        if (buffer) {\n                            createTemporalFile(fileName, buffer).done(\n                                function (file) {\n                                    storageItems.push(file);\n                                    completeFile();\n                                },\n                                function () {\n                                    completeFile();\n                                }\n                            );\n                        }\n                        else {\n                            completeFile();\n                        }\n                    }\n                    else {\n                        Windows.Storage.StorageFile.getFileFromPathAsync(file).done(\n                            function (file) {\n                                storageItems.push(file);\n                                completeFile();\n                            },\n                            function () {\n                                completeFile();\n                            }\n                        );\n                    }\n                }\n            }\n        };\n\n\n        var dataTransferManager = Windows.ApplicationModel.DataTransfer.DataTransferManager.getForCurrentView();\n\n        dataTransferManager.addEventListener(\"datarequested\", doShare);\n\n        try {\n            Windows.ApplicationModel.DataTransfer.DataTransferManager.showShareUI();\n            win(true);\n        } catch (err) {\n            fail(err);\n        }\n    },\n\n    canShareViaEmail: function (win, fail, args) {\n        win(true);\n    },\n\n    shareViaEmail: function (win, fail, args) {\n        //Text Message\n        var message = args[0];\n        //Title \n        var subject = args[1];\n        //File(s) Path\n        var fileOrFileArray = args[5];\n\n        var doShare = function (e) {\n            e.request.data.properties.title = subject ? subject : \"Sharing\";\n            if (message) {\n                var htmlFormat = Windows.ApplicationModel.DataTransfer.HtmlFormatHelper.createHtmlFormat(message);\n                e.request.data.setHtmlFormat(htmlFormat);\n            }\n\n            if (fileOrFileArray.length > 0) {\n                var deferral = e.request.getDeferral();\n                var storageItems = [];\n                var filesCount = fileOrFileArray.length;\n                for (var i = 0; i < fileOrFileArray.length; i++) {\n                    Windows.Storage.StorageFile.getFileFromPathAsync(fileOrFileArray[i]).done(\n                        function (index, file) {\n                            var path = fileOrFileArray[index];\n                            var streamRef = Windows.Storage.Streams.RandomAccessStreamReference.createFromFile(file);\n                            e.request.data.resourceMap[path] = streamRef;\n                            storageItems.push(file);\n                            if (!--filesCount) {\n                                e.request.data.setStorageItems(storageItems);\n                                deferral.complete();\n                            }\n                        }.bind(this, i),\n                        function () {\n                            if (!--filesCount) {\n                                e.request.data.setStorageItems(storageItems);\n                                deferral.complete();\n                            }\n                        }\n                    );\n                }\n            }\n        };\n\n        var dataTransferManager = Windows.ApplicationModel.DataTransfer.DataTransferManager.getForCurrentView();\n\n        dataTransferManager.addEventListener(\"datarequested\", doShare);\n\n        try {\n            Windows.ApplicationModel.DataTransfer.DataTransferManager.showShareUI();\n            win(true);\n        } catch (err) {\n            fail(err);\n        }\n    },\n\n    shareViaSMS: function (win, fail, args) {\n        var chatMessage = new Windows.ApplicationModel.Chat.ChatMessage();\n        chatMessage.body = args[0].message;\n        if (!!args[1]) {\n            chatMessage.recipients.push(args[1]);\n        }\n        Windows.ApplicationModel.Chat.ChatMessageManager.showComposeSmsMessageAsync(chatMessage).done(win, fail);\n    }\n};\n\nrequire(\"cordova/exec/proxy\").add(\"SocialSharing\", module.exports);"}